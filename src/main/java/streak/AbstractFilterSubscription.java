package streak;

import javax.annotation.Nonnull;

abstract class AbstractFilterSubscription<T>
  extends SubscriptionWithDownstream<T>
{
  AbstractFilterSubscription( @Nonnull final Flow.Subscriber<? super T> subscriber )
  {
    super( subscriber );
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void onNext( @Nonnull final T item )
  {
    if ( isNotDisposed() )
    {
      if ( includeItem( item ) )
      {
        getDownstreamSubscriber().onNext( item );
      }
      // includeItem(item) can invoke onError so need to check if subscription is still live
      else if ( isNotDisposed() )
      {
        // Todo: This could cause recursive stack blowout if multiple requests rejected????
        getUpstreamSubscription().request( 1 );
      }
    }
  }

  /**
   * Return true if item should be included in stream.
   * This method will catch any exception generated by the custom code that tests whether to include
   * item and convert it to an onError signal.
   *
   * @return true if item should be included in stream.
   */
  private boolean includeItem( @Nonnull final T item )
  {
    try
    {
      return shouldIncludeItem( item );
    }
    catch ( final Throwable throwable )
    {
      onError( throwable );
      return false;
    }
  }

  /**
   * Return true if the specified item should be included in the subscription.
   *
   * @return true if the specified item should be included in the subscription.
   */
  protected abstract boolean shouldIncludeItem( @Nonnull T item );
}
